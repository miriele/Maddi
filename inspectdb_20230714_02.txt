# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BoardBoard(models.Model):
    num = models.AutoField(primary_key=True)
    writer = models.CharField(max_length=50)
    subject = models.CharField(max_length=300)
    passwd = models.CharField(max_length=50)
    content = models.TextField()
    readcount = models.IntegerField()
    ref = models.IntegerField()
    restep = models.IntegerField()
    relevel = models.IntegerField()
    regdate = models.DateTimeField()
    ip = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'board_board'


class BoardImageboard(models.Model):
    imageid = models.AutoField(primary_key=True)
    title = models.CharField(max_length=100)
    image = models.CharField(max_length=100)
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'board_imageboard'


class Dbtest(models.Model):
    id = models.CharField(primary_key=True, max_length=20)
    passwd = models.CharField(max_length=30)
    name = models.CharField(db_column='NAME', max_length=30)  # Field name made lowercase.
    tel = models.CharField(max_length=20, blank=True, null=True)
    logtime = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dbtest'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class MdAlgyT(models.Model):
    algy_t_id = models.SmallIntegerField(primary_key=True, db_comment='알러지분류ID')
    algy_t_name = models.CharField(max_length=15, db_comment='알러지분류명')

    class Meta:
        managed = False
        db_table = 'md_algy_t'
        db_table_comment = '알러지분류'


class MdAreaT(models.Model):
    area_t_id = models.IntegerField(primary_key=True, db_comment='면적분류ID')
    area_t_name = models.CharField(max_length=10, db_comment='면적분류명')
    area_t_min = models.SmallIntegerField(db_comment='면적 min')
    area_t_max = models.SmallIntegerField(db_comment='면적 max')

    class Meta:
        managed = False
        db_table = 'md_area_t'
        db_table_comment = '매장면적타입'


class MdBjd(models.Model):
    bjd_code = models.DecimalField(primary_key=True, max_digits=10, decimal_places=0, db_comment='법정동코드')
    bjd_name = models.CharField(max_length=80, db_comment='법정동명')

    class Meta:
        managed = False
        db_table = 'md_bjd'
        db_table_comment = '법정동코드'


class MdBuck(models.Model):
    buck_id = models.AutoField(primary_key=True, db_comment='장바구니ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    stor_m = models.ForeignKey('MdStorM', models.DO_NOTHING, db_comment='매장메뉴ID')
    buck_num = models.IntegerField(db_comment='주문수량')
    buck_reg_ts = models.DateTimeField(db_comment='등록일시')
    buck_del_ts = models.DateTimeField(blank=True, null=True, db_comment='삭제일시')
    buck_ord_ts = models.DateTimeField(blank=True, null=True, db_comment='주문일시')

    class Meta:
        managed = False
        db_table = 'md_buck'
        db_table_comment = '장바구니'


class MdCLike(models.Model):
    like_id = models.AutoField(primary_key=True, db_comment='LikeID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    comb = models.ForeignKey('MdComb', models.DO_NOTHING, db_comment='추천조합ID')
    like_reg_ts = models.DateTimeField(db_comment='등록일')

    class Meta:
        managed = False
        db_table = 'md_c_like'
        db_table_comment = '추천조합_Like'


class MdComb(models.Model):
    comb_id = models.AutoField(primary_key=True, db_comment='추천조합ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    comb_tit = models.CharField(max_length=90, db_comment='제목')
    comb_nop = models.IntegerField(db_comment='인원수')
    comb_cont = models.TextField(db_comment='조합내용')
    comb_img = models.CharField(max_length=30, blank=True, null=True, db_comment='이미지경로')
    comb_reg_ts = models.DateTimeField(db_comment='작성일시')

    class Meta:
        managed = False
        db_table = 'md_comb'
        db_table_comment = '추천조합'


class MdCombM(models.Model):
    comb_m_id = models.AutoField(primary_key=True, db_comment='조합메뉴ID')
    comb = models.ForeignKey(MdComb, models.DO_NOTHING, db_comment='추천조합ID')
    menu = models.ForeignKey('MdMenu', models.DO_NOTHING, db_comment='메뉴ID')

    class Meta:
        managed = False
        db_table = 'md_comb_m'
        db_table_comment = '조합메뉴'


class MdCombR(models.Model):
    c_reply_id = models.AutoField(primary_key=True, db_comment='댓글ID')
    comb = models.ForeignKey(MdComb, models.DO_NOTHING, db_comment='추천조합ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    c_reply_cont = models.CharField(max_length=300, db_comment='댓글내용')
    c_reply_ts = models.DateTimeField(db_comment='댓글작성일')

    class Meta:
        managed = False
        db_table = 'md_comb_r'
        db_table_comment = '추천조합댓글'


class MdDrnkT(models.Model):
    drnk_t_id = models.SmallIntegerField(primary_key=True, db_comment='음료분류ID')
    drnk_t_name = models.CharField(max_length=30, db_comment='음료분류명')

    class Meta:
        managed = False
        db_table = 'md_drnk_t'
        db_table_comment = '음료분류'


class MdDsrtT(models.Model):
    dsrt_t_id = models.SmallIntegerField(primary_key=True, db_comment='디저트분류ID')
    dsrt_t_name = models.CharField(max_length=20, db_comment='디저트분류명')

    class Meta:
        managed = False
        db_table = 'md_dsrt_t'
        db_table_comment = '디저트분류'


class MdFavorite(models.Model):
    fav_id = models.AutoField(primary_key=True, db_comment='즐겨찾기ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    stor = models.ForeignKey('MdStor', models.DO_NOTHING, db_comment='매장ID')
    fav_reg_ts = models.DateTimeField(db_comment='등록일')

    class Meta:
        managed = False
        db_table = 'md_favorite'
        db_table_comment = '즐겨찾기'


class MdGen(models.Model):
    gen_id = models.IntegerField(primary_key=True, db_comment='성별ID')
    gen_name = models.CharField(max_length=10, db_comment='성별')

    class Meta:
        managed = False
        db_table = 'md_gen'
        db_table_comment = '성별'


class MdIce(models.Model):
    ice_t_id = models.IntegerField(primary_key=True, db_comment='아이스분류ID')
    ice_t_name = models.CharField(max_length=10, db_comment='아이스타입명')

    class Meta:
        managed = False
        db_table = 'md_ice'
        db_table_comment = '아이스분류'


class MdIntrT(models.Model):
    intr_t_id = models.IntegerField(primary_key=True, db_comment='관심사분류ID')
    intr_t_name = models.CharField(max_length=21, db_comment='관심사분류명')

    class Meta:
        managed = False
        db_table = 'md_intr_t'
        db_table_comment = '관심사분류'


class MdMAlgy(models.Model):
    m_algy_id = models.SmallAutoField(primary_key=True, db_comment='메뉴알러지ID')
    menu = models.ForeignKey('MdMenu', models.DO_NOTHING, db_comment='메뉴ID')
    algy_t = models.ForeignKey(MdAlgyT, models.DO_NOTHING, db_comment='알러지분류ID')

    class Meta:
        managed = False
        db_table = 'md_m_algy'
        db_table_comment = '메뉴알러지'


class MdMenu(models.Model):
    menu_id = models.IntegerField(primary_key=True, db_comment='메뉴ID')
    dsrt_t = models.ForeignKey(MdDsrtT, models.DO_NOTHING, blank=True, null=True, db_comment='디저트분류ID')
    drnk_t = models.ForeignKey(MdDrnkT, models.DO_NOTHING, blank=True, null=True, db_comment='음료분류ID')
    menu_name = models.CharField(max_length=60, db_comment='메뉴명')
    menu_cal = models.SmallIntegerField(db_comment='칼로리')
    menu_info = models.CharField(max_length=300, db_comment='메뉴소개')
    menu_img = models.CharField(max_length=30, blank=True, null=True, db_comment='메뉴이미지')

    class Meta:
        managed = False
        db_table = 'md_menu'
        db_table_comment = '메뉴'


class MdMenuT(models.Model):
    menu_t_id = models.IntegerField(primary_key=True, db_comment='메뉴타입ID')
    menu_t_name = models.CharField(max_length=15, db_comment='메뉴타입명')

    class Meta:
        managed = False
        db_table = 'md_menu_t'
        db_table_comment = '메뉴타입 : 1 : 일반\r\n2 : 시그니처'


class MdOrdr(models.Model):
    ordr_id = models.AutoField(primary_key=True, db_comment='주문ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    weather = models.ForeignKey('MdWeather', models.DO_NOTHING, db_comment='날씨분류ID')
    ordr_temp = models.IntegerField(db_comment='기온')
    ordr_ord_ts = models.DateTimeField(db_comment='주문일시')
    ordr_com_ts = models.DateTimeField(blank=True, null=True, db_comment='완료일시')

    class Meta:
        managed = False
        db_table = 'md_ordr'
        db_table_comment = '주문'


class MdOrdrM(models.Model):
    ordr_m_id = models.AutoField(primary_key=True, db_comment='주문메뉴ID')
    ordr = models.ForeignKey(MdOrdr, models.DO_NOTHING, db_comment='주문ID')
    stor_m = models.ForeignKey('MdStorM', models.DO_NOTHING, db_comment='매장메뉴ID')
    ordr_num = models.IntegerField(db_comment='주문수량')

    class Meta:
        managed = False
        db_table = 'md_ordr_m'
        db_table_comment = '주문메뉴'


class MdRevT(models.Model):
    rev_t_id = models.AutoField(primary_key=True, db_comment='리뷰태그ID')
    rev = models.ForeignKey('MdReview', models.DO_NOTHING, db_comment='리뷰ID')
    tag = models.ForeignKey('MdTag', models.DO_NOTHING, db_comment='태그ID')

    class Meta:
        managed = False
        db_table = 'md_rev_t'
        db_table_comment = '리뷰태그'


class MdReview(models.Model):
    rev_id = models.AutoField(primary_key=True, db_comment='리뷰ID')
    ordr = models.ForeignKey(MdOrdr, models.DO_NOTHING, db_comment='주문ID')
    rev_star = models.DecimalField(max_digits=2, decimal_places=1, db_comment='리뷰별점')
    rev_ts = models.DateTimeField(db_comment='작성일시')
    rev_cont = models.CharField(max_length=300, blank=True, null=True, db_comment='리뷰내용')
    rev_img = models.CharField(max_length=30, blank=True, null=True, db_comment='이미지경로')

    class Meta:
        managed = False
        db_table = 'md_review'
        db_table_comment = '리뷰'


class MdStor(models.Model):
    stor_id = models.AutoField(primary_key=True, db_comment='매장ID')
    stor_t = models.ForeignKey('MdStorT', models.DO_NOTHING, db_comment='매장구분ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, blank=True, null=True, db_comment='회원ID')
    bjd_code = models.ForeignKey(MdBjd, models.DO_NOTHING, db_column='bjd_code', db_comment='법정동코드')
    area_t = models.ForeignKey(MdAreaT, models.DO_NOTHING, db_comment='면적분류ID')
    stor_img = models.CharField(max_length=150, db_comment='이미지')
    stor_name = models.CharField(max_length=50, db_comment='매장명')
    stor_addr = models.CharField(max_length=200, db_comment='매장주소')
    stor_lati = models.DecimalField(max_digits=19, decimal_places=15, blank=True, null=True, db_comment='위치-위도')
    stor_long = models.DecimalField(max_digits=19, decimal_places=15, blank=True, null=True, db_comment='위치-경도')
    stor_tel = models.CharField(max_length=20, blank=True, null=True, db_comment='전화번호')
    stor_num = models.CharField(max_length=20, blank=True, null=True, db_comment='사업자등록번호')

    class Meta:
        managed = False
        db_table = 'md_stor'
        db_table_comment = '매장'


class MdStorM(models.Model):
    stor_m_id = models.AutoField(primary_key=True, db_comment='매장메뉴ID')
    stor = models.ForeignKey(MdStor, models.DO_NOTHING, db_comment='매장ID')
    menu = models.ForeignKey(MdMenu, models.DO_NOTHING, db_comment='메뉴ID')
    ice_t = models.ForeignKey(MdIce, models.DO_NOTHING, db_comment='아이스분류ID')
    menu_t = models.ForeignKey(MdMenuT, models.DO_NOTHING, db_comment='메뉴타입ID')
    stor_m_pric = models.SmallIntegerField(db_comment='가격')
    stor_m_name = models.CharField(max_length=60, db_comment='매장메뉴명')
    stor_m_cal = models.SmallIntegerField(db_comment='매장메뉴칼로리')
    stor_m_info = models.CharField(max_length=600, db_comment='매장메뉴소개')
    stor_m_img = models.CharField(max_length=30, db_comment='매장메뉴이미지')

    class Meta:
        managed = False
        db_table = 'md_stor_m'
        db_table_comment = '매장메뉴'


class MdStorReg(models.Model):
    reg_id = models.AutoField(primary_key=True, db_comment='매장등록신청ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    stor = models.ForeignKey(MdStor, models.DO_NOTHING, db_comment='매장ID')
    reg_num = models.CharField(max_length=40, db_comment='사업자등록번호')
    reg_img = models.CharField(max_length=50, db_comment='사업자등록증경로')
    reg_sub_ts = models.DateTimeField(db_comment='신청일시')
    reg_con_ts = models.DateTimeField(blank=True, null=True, db_comment='승일일시')

    class Meta:
        managed = False
        db_table = 'md_stor_reg'
        db_table_comment = '매장등록신청'


class MdStorT(models.Model):
    stor_t_id = models.IntegerField(primary_key=True, db_comment='매장구분ID')
    stor_t_name = models.CharField(max_length=60, db_comment='구분명')

    class Meta:
        managed = False
        db_table = 'md_stor_t'
        db_table_comment = '매장구분 : 1 : 개인\r\n2 : 스타벅스\r\n3 : 커피빈\r\n4 : 바나프레소'


class MdTag(models.Model):
    tag_id = models.SmallIntegerField(primary_key=True, db_comment='태그ID')
    tag_g = models.ForeignKey('MdTagG', models.DO_NOTHING, db_comment='태그그룹ID')
    tag_name = models.CharField(max_length=50, db_comment='태그명')

    class Meta:
        managed = False
        db_table = 'md_tag'
        db_table_comment = '태그'


class MdTagG(models.Model):
    tag_g_id = models.IntegerField(primary_key=True, db_comment='태그그룹ID')
    tag_g_name = models.CharField(max_length=15, db_comment='태그그룹명')

    class Meta:
        managed = False
        db_table = 'md_tag_g'
        db_table_comment = '태그그룹'


class MdTastT(models.Model):
    tast_t_id = models.IntegerField(primary_key=True, db_comment='맛분류ID')
    tast_t_name = models.CharField(max_length=12, db_comment='맛분류명')

    class Meta:
        managed = False
        db_table = 'md_tast_t'
        db_table_comment = '맛분류'


class MdUAlgy(models.Model):
    u_algy_id = models.AutoField(primary_key=True, db_comment='사용자알러지ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    algy_t = models.ForeignKey(MdAlgyT, models.DO_NOTHING, db_comment='알러지분류ID')

    class Meta:
        managed = False
        db_table = 'md_u_algy'
        db_table_comment = '사용자알러지'


class MdUDrnk(models.Model):
    u_drnk_id = models.AutoField(primary_key=True, db_comment='사용자음료ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    drnk_t = models.ForeignKey(MdDrnkT, models.DO_NOTHING, db_comment='음료분류ID')

    class Meta:
        managed = False
        db_table = 'md_u_drnk'
        db_table_comment = '사용자음료'


class MdUDsrt(models.Model):
    u_dsrt_id = models.AutoField(primary_key=True, db_comment='사용자디저트ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    dsrt_t = models.ForeignKey(MdDsrtT, models.DO_NOTHING, db_comment='디저트분류ID')

    class Meta:
        managed = False
        db_table = 'md_u_dsrt'
        db_table_comment = '사용자디저트'


class MdUIntr(models.Model):
    u_intr_id = models.AutoField(primary_key=True, db_comment='사용자관심사ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    intr_t = models.ForeignKey(MdIntrT, models.DO_NOTHING, db_comment='관심사분류ID')

    class Meta:
        managed = False
        db_table = 'md_u_intr'
        db_table_comment = '사용자관심사'


class MdUTast(models.Model):
    u_tast_id = models.AutoField(primary_key=True, db_comment='사용자맛ID')
    user = models.ForeignKey('MdUser', models.DO_NOTHING, db_comment='회원ID')
    tast_t = models.ForeignKey(MdTastT, models.DO_NOTHING, db_comment='맛분류ID')

    class Meta:
        managed = False
        db_table = 'md_u_tast'
        db_table_comment = '사용자맛'


class MdUser(models.Model):
    user_id = models.CharField(primary_key=True, max_length=20, db_comment='회원ID')
    user_g = models.ForeignKey('MdUserG', models.DO_NOTHING, db_comment='회원등급ID')
    gen = models.ForeignKey(MdGen, models.DO_NOTHING, db_comment='성별ID')
    user_nick = models.CharField(unique=True, max_length=45, db_comment='닉네임')
    user_pass = models.CharField(max_length=20, db_comment='비밀번호')
    user_name = models.CharField(max_length=30, db_comment='회원이름')
    user_bir = models.DateField(db_comment='생년월일')
    user_img = models.CharField(max_length=50, db_comment='이미지')
    user_reg_ts = models.DateTimeField(db_comment='가입일시')
    user_ext_ts = models.DateTimeField(blank=True, null=True, db_comment='탈퇴일시')

    class Meta:
        managed = False
        db_table = 'md_user'
        db_table_comment = '회원'


class MdUserG(models.Model):
    user_g_id = models.IntegerField(primary_key=True, db_comment='회원등급ID')
    user_g_name = models.CharField(max_length=15, db_comment='등급명')

    class Meta:
        managed = False
        db_table = 'md_user_g'
        db_table_comment = '회원등급'


class MdWeather(models.Model):
    weather_id = models.IntegerField(primary_key=True, db_comment='날씨분류ID')
    weather_name = models.CharField(max_length=10, db_comment='날씨분류명')

    class Meta:
        managed = False
        db_table = 'md_weather'
        db_table_comment = '날씨분류'


class MemberMember(models.Model):
    id = models.CharField(primary_key=True, max_length=50)
    passwd = models.CharField(max_length=50)
    name = models.CharField(max_length=50)
    email = models.CharField(max_length=100)
    tel = models.CharField(max_length=20)
    depart = models.CharField(max_length=50)
    logtime = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'member_member'
